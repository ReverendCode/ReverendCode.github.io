// Basic structure comes from:
// https://csantosbh.wordpress.com/2014/01/09/custom-shaders-with-three-js-uniforms-textures-and-lighting/




// standard global variables
var scene, camera, renderer;
 
// Character 3d object
var character = null;
 
// FUNCTIONS
function init() {
    // SCENE
    scene = new THREE.Scene();
 
    // CAMERA
    var SCREEN_WIDTH = window.innerWidth,
                SCREEN_HEIGHT = window.innerHeight;
    var VIEW_ANGLE = 45,
                ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT,
                NEAR = 0.1, FAR = 1000;
    camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT,
                                                 NEAR, FAR);
    scene.add(camera);
    camera.position.set(1,2,4);
    camera.lookAt(scene.position);
 
    // RENDERER
    renderer = new THREE.WebGLRenderer({
        antialias:true,
        alpha: true
    });
    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
    var container = document.body;
    container.appendChild( renderer.domElement );
    var directionalLight = new THREE.PointLight(0xffffff, 1.0);
    directionalLight.position.set(0,0,2);
    scene.add(directionalLight);
    // Main polygon

    character = buildCharacter();
    scene.add(character);
    
 
    // Start animation
    animate();
}

function buildCharacter() {
    // This is going to be the function that returns the geometry generated by the terrain engine
    var geometry = new THREE.BoxGeometry( 1, 1, 1 );
    var material = new THREE.ShaderMaterial({
    uniforms: THREE.UniformsUtils.merge([
        THREE.UniformsLib['lights'],
        {
            color: {type: 'f', value: 0.5},
            diffuse: {type: 'c', value: new THREE.Color(0x0000ff)}
        }]),
        lights: true,
        
    vertexShader: document.
                  getElementById('vertShader').text,
    fragmentShader: document.
                  getElementById('fragShader').text
});
    return new THREE.Mesh( geometry, material );
}
 
function animate() {
    // Update uniform
    var c = 0.5;
    // character.material.uniforms.color.value = c;
    // Render scene
    renderer.render( scene, camera );
    requestAnimationFrame( animate );
}